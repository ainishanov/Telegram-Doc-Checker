const express = require('express');
const router = express.Router();
const { createPayment, checkPaymentStatus, processNotification, getPaymentUrl } = require('../utils/payment');
const { getUserData, changePlan, updateUserPlanAfterPayment, PLANS } = require('../models/userLimits');
const db = require('../utils/db');
const config = require('../config/config');

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * –Æ–ö–∞—Å—Å–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ return_url –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */
router.get('/success', async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    console.log('[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞ –ø–ª–∞—Ç–µ–∂–∞');
    console.log('- Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(req.query));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
    return res.status(200).send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta charset="utf-8">
          <style>
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
              margin: 0;
              padding: 20px;
              color: #333;
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              min-height: 100vh;
              display: flex;
              align-items: center;
              justify-content: center;
            }
            .container {
              background: white;
              padding: 40px 30px;
              border-radius: 16px;
              box-shadow: 0 20px 60px rgba(0,0,0,0.2);
              max-width: 500px;
              width: 100%;
              text-align: center;
            }
            .success-icon {
              font-size: 64px;
              margin-bottom: 20px;
              animation: bounce 1s ease-in-out;
            }
            @keyframes bounce {
              0%, 20%, 60%, 100% { transform: translateY(0); }
              40% { transform: translateY(-20px); }
              80% { transform: translateY(-10px); }
            }
            .title {
              color: #4CAF50;
              font-size: 28px;
              font-weight: 600;
              margin-bottom: 16px;
            }
            .subtitle {
              color: #666;
              font-size: 16px;
              line-height: 1.5;
              margin-bottom: 30px;
            }
            .info-box {
              background: #f8f9fa;
              padding: 20px;
              border-radius: 12px;
              margin: 20px 0;
              border-left: 4px solid #4CAF50;
              text-align: left;
            }
            .steps {
              margin: 15px 0;
            }
            .step {
              margin: 10px 0;
              padding: 8px 0;
              border-bottom: 1px solid #eee;
              display: flex;
              align-items: center;
            }
            .step:last-child {
              border-bottom: none;
            }
            .step-number {
              background: #4CAF50;
              color: white;
              width: 24px;
              height: 24px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              margin-right: 12px;
              font-size: 14px;
              font-weight: 600;
              flex-shrink: 0;
            }
            .button {
              display: inline-block;
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
              color: white;
              padding: 16px 32px;
              text-decoration: none;
              border-radius: 25px;
              font-weight: 600;
              font-size: 16px;
              transition: transform 0.2s, box-shadow 0.2s;
              box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
              margin-top: 20px;
            }
            .button:hover {
              transform: translateY(-2px);
              box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
            }
            .note {
              color: #666; 
              font-size: 14px; 
              margin: 20px 0;
              line-height: 1.4;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="success-icon">‚úÖ</div>
            <h1 class="title">–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!</h1>
            <p class="subtitle">
              –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
            </p>
            
            <div class="info-box">
              <strong>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ:</strong>
              <div class="steps">
                <div class="step">
                  <span class="step-number">1</span>
                  <span>–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</span>
                </div>
                <div class="step">
                  <span class="step-number">2</span>
                  <span>–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (1-3 –º–∏–Ω—É—Ç—ã)</span>
                </div>
                <div class="step">
                  <span class="step-number">3</span>
                  <span>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</span>
                </div>
              </div>
            </div>
            
            <div class="note">
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <strong>/tariff</strong><br>
              –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ –±–æ—Ç.
            </div>
            
            <div style="margin-top: 30px;">
              <button class="button" onclick="openTelegram()" style="margin-bottom: 15px; display: block; width: 100%; border: none; cursor: pointer;">
                üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
              </button>
              
              <div style="text-align: center; margin: 15px 0;">
                <span style="color: #999; font-size: 14px;">–∏–ª–∏</span>
              </div>
              
              <a class="button secondary" href="https://t.me/dogovobot" target="_blank" style="background: #f5f5f5; color: #333; margin-bottom: 15px; display: block;">
                üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
              </a>
              
              <div style="background: #f0f8ff; padding: 15px; border-radius: 8px; margin-top: 20px; font-size: 14px; color: #666;">
                üí° <strong>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç:</strong><br>
                1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –≤—Ä—É—á–Ω—É—é<br>
                2. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: <code style="background: #e8e8e8; padding: 2px 4px; border-radius: 3px;">@dogovobot</code><br>
                3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code style="background: #e8e8e8; padding: 2px 4px; border-radius: 3px;">/tariff</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
              </div>
            </div>
            
            <script>
              function openTelegram() {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                
                if (isMobile) {
                  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram
                  window.location.href = 'tg://resolve?domain=dogovobot';
                  
                  // –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
                  setTimeout(function() {
                    window.open('https://t.me/dogovobot', '_blank');
                  }, 1500);
                } else {
                  // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
                  window.open('https://t.me/dogovobot', '_blank');
                }
              }
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
              setTimeout(function() {
                console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –±–æ—Ç—É');
              }, 3000);
            </script>
          </div>
        </body>
      </html>
    `);
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Å–ø–µ—Ö–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return res.status(200).send(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta charset="utf-8">
          <style>
            body { 
              font-family: Arial, sans-serif; 
              text-align: center; 
              padding: 20px;
              color: #333;
            }
          </style>
        </head>
        <body>
          <h1 style="color: #4CAF50;">‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç</h1>
          <p>–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–æ–π /tariff</p>
          
          <div style="margin-top: 20px;">
            <a href="tg://resolve?domain=dogovobot" style="display: inline-block; background: #2196F3; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; margin: 5px;">
              üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
            </a>
            <br>
            <a href="https://t.me/dogovobot" target="_blank" style="display: inline-block; background: #f5f5f5; color: #333; padding: 12px 20px; text-decoration: none; border-radius: 5px; margin: 5px;">
              üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            </a>
          </div>
          
          <p style="margin-top: 20px; font-size: 12px; color: #666;">
            –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞: @dogovobot
          </p>
        </body>
      </html>
    `);
  }
});

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 */
router.post('/create', async (req, res) => {
  try {
    const { userId, planId, amount, description } = req.body;
    
    if (!userId || !planId || !amount) {
      return res.status(400).json({
        success: false,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      });
    }

    const payment = await createPayment({
      userId,
      planId,
      amount,
      description,
      returnUrl: config.yookassaReturnUrl
    });

    if (!payment || !payment.success) {
      return res.status(400).json({
        success: false,
        message: payment ? payment.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      });
    }

    res.json({
      success: true,
      paymentUrl: payment.paymentUrl,
      paymentId: payment.paymentId
    });

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
router.get('/status/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    if (!paymentId) {
      return res.status(400).json({
        success: false,
        message: 'ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
    }

    const payment = await checkPaymentStatus(paymentId);
    
    if (!payment) {
      return res.status(404).json({
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      payment: {
        id: payment.id,
        status: payment.status,
        paid: payment.paid,
        amount: payment.amount,
        description: payment.description
      }
    });

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã
 */
router.post('/notifications', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = await processNotification(req.body);
    
    if (!notification || !notification.success) {
      console.error('[ERROR] –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ:', notification ? notification.message : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      return res.status(200).json({ success: true }); // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –Æ–ö–∞—Å—Å–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å—ã
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const { event, paymentId, status, metadata } = notification;
    
    console.log(`[INFO] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å–æ–±—ã—Ç–∏–µ=${event}, –ø–ª–∞—Ç–µ–∂=${paymentId}, —Å—Ç–∞—Ç—É—Å=${status}`);
    console.log(`[INFO] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(metadata));
    
    if (event === 'payment.succeeded' && status === 'succeeded') {
      const { userId, planId } = metadata;
      
      if (!userId || !planId) {
        console.error('[ERROR] –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è userId –∏–ª–∏ planId');
        console.error('- –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', JSON.stringify(metadata));
        return res.status(200).json({ success: true });
      }

      console.log(`[INFO] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∞ ${planId}`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        const updateResult = await updateUserPlanAfterPayment(userId, planId, paymentId);
        
        if (updateResult.success) {
          console.log(`[SUCCESS] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ ${paymentId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–∞—Ä–∏—Ñ ${planId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        } else {
          console.error(`[ERROR] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: ${updateResult.message}`);
        }
      } catch (activationError) {
        console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞:', activationError);
      }
      
    } else if (event === 'refund.succeeded') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
      const { userId, planId } = metadata;
      
      if (userId) {
        console.log(`[INFO] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ç–∞—Ä–∏—Ñ FREE`);
        
        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
          const { changePlan } = require('../models/userLimits');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
          const downgradeResult = await changePlan(userId, 'FREE');
          
          if (downgradeResult.success) {
            console.log(`[SUCCESS] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ç–∞—Ä–∏—Ñ FREE –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ ${paymentId}`);
          } else {
            console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ FREE —Ç–∞—Ä–∏—Ñ: ${downgradeResult.message}`);
          }
        } catch (refundError) {
          console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', refundError);
        }
      } else {
        console.warn('[WARN] –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId');
        console.warn('- Metadata:', JSON.stringify(metadata));
      }
    } else {
      console.log(`[INFO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${event} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status} - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —á—Ç–æ–±—ã –Æ–ö–∞—Å—Å–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    res.status(200).json({ success: true });
    
  } catch (error) {
    console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    res.status(200).json({ success: true });
  }
});

module.exports = router; 