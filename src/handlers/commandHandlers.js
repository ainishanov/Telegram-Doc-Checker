const { getUserSettings, updateUserSettings, resetPrompt } = require('../models/userSettings');
const { PLANS, getUserData } = require('../models/userLimits');
const { handleShowTariff } = require('./planHandlers');
const config = require('../config/config');

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
const COMPANY_INFO = {
  name: "–ò–ü –ù–∏—à–∞–Ω–æ–≤ –ê–π–Ω—É—Ä –ê–±–¥—É–ª–∞–∑–∏–∑–æ–≤–∏—á",
  inn: "164609405227", 
  ogrnip: "314167427200089",
  contacts: {
    email: "ainur.nishanov@gmail.com"
  },
  offerUrl: "https://ainishanov.github.io/Telegram-Doc-Checker/offer.html"
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupPermanentMenu(bot) {
  const menuButtons = {
    keyboard: [
      [{ text: 'üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ' }],
      [{ text: 'üìã –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞' }],
      [{ text: '‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏' }]
    ],
    resize_keyboard: true,
    persistent: true
  };

  try {
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCommands = [
      { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: '/tariff', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ' },
      { command: '/plans', description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã' },
      { command: '/help', description: '–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞' },
      { command: '/about', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏' }
    ];

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ)
    const adminCommands = [
      ...userCommands,
      { command: '/users', description: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)' },
      { command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)' }
    ];

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    bot.setMyCommands(userCommands).then(() => {
      console.log('[INFO] –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
    }).catch((error) => {
      console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    config.adminIds.forEach(adminId => {
      bot.setMyCommands(adminCommands, { scope: { type: 'chat', chat_id: adminId } }).then(() => {
        console.log(`[INFO] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}.`);
      }).catch((error) => {
        console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, error.message);
      });
    });

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ setMyCommands:', error.message);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ sendMessage
  return { reply_markup: menuButtons };
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function handleMenuCommand(bot, msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  console.log(`[DEBUG] handleMenuCommand –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "${text}" –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
  
  switch (text) {
    case 'üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ':
      console.log(`[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ handleShowTariff –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
      console.log(`[DEBUG] handleShowTariff —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${typeof handleShowTariff === 'function'}`);
      handleShowTariff(bot, msg);
      break;
    case 'üìã –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞':
      handleHelp(bot, msg);
      break;
    case '‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏':
      handleAbout(bot, msg);
      break;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleStart = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  console.time(`handleStart_${chatId}`); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = config.adminIds.includes(userId);
  if (isAdmin) {
    console.log(`[ADMIN] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã`);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setupAdminCommands(bot, userId);
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
  bot.sendChatAction(chatId, 'typing').catch(err => {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏: ${err.message}`);
  });
  
  console.time(`getUserData_${chatId}`);
  const userData = getUserData(userId); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  console.timeEnd(`getUserData_${chatId}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –º–µ–Ω—é (–±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥)
  const menuKeyboard = setupPermanentMenu(bot);
  
  const message = `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üîç –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π:
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOC, DOCX, RTF –∏–ª–∏ TXT
2. –Ø –æ–ø—Ä–µ–¥–µ–ª—é —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç

üéÅ *–£ –≤–∞—Å –µ—Å—Ç—å 1 –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞!*
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä.

–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /plans.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
`;
  
  console.time(`sendMessage_${chatId}`);
  try {
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      ...menuKeyboard // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    });
  } catch (error) {
    console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /start –¥–ª—è chatId ${chatId}:`, error.message);
  }
  console.timeEnd(`sendMessage_${chatId}`);
  
  console.timeEnd(`handleStart_${chatId}`); // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleHelp = async (bot, msg) => {
  const userId = msg.from.id.toString();
  const isAdmin = config.adminIds.includes(userId);
  
  let helpText = `
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã
/tariff - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
/plans - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã

üìÑ *–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOC/DOCX –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.
`;

  // –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –∞–¥–º–∏–Ω—ã —É–≤–∏–¥—è—Ç –∏—Ö –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  // if (isAdmin) {
  //   helpText += `
  // 
  // üõ† *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
  // /users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // /stats - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–∞—Ä–∏—Ñ–æ–≤
  // `;
  // }

  const inlineKeyboard = [
    [
      { text: 'üìä –ú–æ–π —Ç–∞—Ä–∏—Ñ', callback_data: 'tariff' },
      { text: 'üíé –¢–∞—Ä–∏—Ñ—ã', callback_data: 'plans' }
    ],
    [
      { text: '‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'about' }
    ]
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  if (isAdmin) {
    inlineKeyboard.push([
      { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' },
      { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
    ]);
  }

  await bot.sendMessage(msg.chat.id, helpText, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleAbout = async (bot, msg) => {
  const chatId = msg.chat.id;

  const aboutText = `
*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:*

*${COMPANY_INFO.name}*
–ò–ù–ù: ${COMPANY_INFO.inn}
–û–ì–†–ù–ò–ü: ${COMPANY_INFO.ogrnip}
Email: ${COMPANY_INFO.contacts.email}

–ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.
[–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã](${COMPANY_INFO.offerUrl})
`;

  await bot.sendMessage(chatId, aboutText, {
    parse_mode: 'Markdown',
    disable_web_page_preview: false
  });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleAdminStats = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }
  
  try {
    console.log(`[ADMIN] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const { getUserData, getAllPlans, PLANS } = require('../models/userLimits');
    const fs = require('fs');
    const path = require('path');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    const USERS_DATA_FILE = path.join(__dirname, '../../data/users.json');
    
    let allUsersData = {};
    if (fs.existsSync(USERS_DATA_FILE)) {
      allUsersData = JSON.parse(fs.readFileSync(USERS_DATA_FILE, 'utf8'));
    }
    
    const totalUsers = Object.keys(allUsersData).length;
    
    // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    let planCounts = {
      FREE: 0,
      BASIC: 0,
      PRO: 0,
      UNLIMITED: 0
    };
    
    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫
    let subscriptionStatuses = {
      noSubscription: 0,    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
      inactive: 0,          // –ü–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
      active: 0,            // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      pending: 0            // –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
    };
    
    // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    let revenue = {
      BASIC: 0,
      PRO: 0,
      UNLIMITED: 0,
      total: 0
    };
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let totalRequests = 0;
    let usersWithActivity = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, userData] of Object.entries(allUsersData)) {
      // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
      const plan = userData.plan || 'FREE';
      planCounts[plan]++;
      
      // –°—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
      const requestsUsed = userData.requestsUsed || 0;
      totalRequests += requestsUsed;
      
      if (requestsUsed > 0) {
        usersWithActivity++;
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (plan === 'FREE') {
        subscriptionStatuses.noSubscription++;
      } else {
        const subscription = userData.subscriptionData;
        if (subscription) {
          if (subscription.active) {
            subscriptionStatuses.active++;
            // –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            revenue[plan] += PLANS[plan].price;
            revenue.total += PLANS[plan].price;
          } else if (subscription.paymentStatus === 'pending') {
            subscriptionStatuses.pending++;
          } else {
            subscriptionStatuses.inactive++;
          }
        } else {
          subscriptionStatuses.inactive++;
        }
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const currentDate = new Date().toLocaleDateString('ru-RU');
    
    let message = `üìä *–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨*\n`;
    message += `üìÖ –î–∞—Ç–∞: ${currentDate}\n\n`;
    
    message += `üë• *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${usersWithActivity}* (${totalUsers > 0 ? ((usersWithActivity/totalUsers)*100).toFixed(1) : 0}%)\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: *${totalRequests}*\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *${totalUsers > 0 ? (totalRequests/totalUsers).toFixed(1) : 0}*\n\n`;
    
    message += `üíº *–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ê–†–ò–§–ê–ú:*\n`;
    for (const [planId, count] of Object.entries(planCounts)) {
      const planName = PLANS[planId].name;
      const percentage = totalUsers > 0 ? ((count/totalUsers)*100).toFixed(1) : 0;
      message += `‚Ä¢ ${planName}: *${count}* (${percentage}%)\n`;
    }
    message += `\n`;
    
    message += `üí≥ *–°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–û–ö:*\n`;
    message += `‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *${subscriptionStatuses.noSubscription}*\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: *${subscriptionStatuses.active}*\n`;
    message += `‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: *${subscriptionStatuses.inactive}*\n`;
    message += `‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: *${subscriptionStatuses.pending}*\n\n`;
    
    message += `üí∞ *–î–û–•–û–î–´ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏):*\n`;
    message += `‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: *${revenue.BASIC}* ‚ÇΩ\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π: *${revenue.PRO}* ‚ÇΩ\n`;
    message += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π: *${revenue.UNLIMITED}* ‚ÇΩ\n`;
    message += `‚Ä¢ **–ò–¢–û–ì–û: ${revenue.total} ‚ÇΩ**\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'admin_refresh_stats' },
          { text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_stats' }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    });
    
    console.log(`[ADMIN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${userId}`);
    
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleAdminUsers = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }
  
  try {
    console.log(`[ADMIN] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    const fs = require('fs');
    const path = require('path');
    const { PLANS } = require('../models/userLimits');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const USERS_DATA_FILE = path.join(__dirname, '../../data/users.json');
    
    let allUsersData = {};
    if (fs.existsSync(USERS_DATA_FILE)) {
      allUsersData = JSON.parse(fs.readFileSync(USERS_DATA_FILE, 'utf8'));
    }
    
    const users = Object.entries(allUsersData);
    
    if (users.length === 0) {
      await bot.sendMessage(chatId, 'üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    users.sort((a, b) => {
      const dateA = new Date(a[1].registrationDate || 0);
      const dateB = new Date(b[1].registrationDate || 0);
      return dateB - dateA;
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const recentUsers = users.slice(0, 10);
    
    let message = `üë• *–ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (${recentUsers.length} –∏–∑ ${users.length}):*\n\n`;
    
    recentUsers.forEach(([ userId, userData ], index) => {
      const regDate = userData.registrationDate 
        ? new Date(userData.registrationDate).toLocaleDateString('ru-RU')
        : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const plan = PLANS[userData.plan || 'FREE'];
      const requestsUsed = userData.requestsUsed || 0;
      
      let subscriptionStatus = 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      if (userData.plan === 'FREE') {
        subscriptionStatus = 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è';
      } else if (userData.subscriptionData?.active) {
        subscriptionStatus = 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞';
      } else if (userData.subscriptionData?.paymentStatus === 'pending') {
        subscriptionStatus = 'üü° –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
      }
      
      message += `*${index + 1}.* ID: \`${userId}\`\n`;
      message += `   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${regDate}\n`;
      message += `   üíº –¢–∞—Ä–∏—Ñ: ${plan.name}\n`;
      message += `   üìä –ó–∞–ø—Ä–æ—Å–æ–≤: ${requestsUsed}\n`;
      message += `   üí≥ –°—Ç–∞—Ç—É—Å: ${subscriptionStatus}\n\n`;
    });
    
    if (users.length > 10) {
      message += `... –∏ –µ—â–µ ${users.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'admin_refresh_users' }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {Object} query - Callback-–∑–∞–ø—Ä–æ—Å
 */
async function handleAdminCallback(bot, query) {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  const userId = query.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    await bot.answerCallbackQuery(query.id, { text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', show_alert: true });
    return;
  }
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await bot.answerCallbackQuery(query.id);
    
    if (data === 'admin_refresh_stats' || data === 'admin_stats') {
      await bot.deleteMessage(chatId, messageId);
      await handleAdminStats(bot, query.message);
      return;
    }
    
    if (data === 'admin_refresh_users') {
      await bot.deleteMessage(chatId, messageId);
      await handleAdminUsers(bot, query.message);
      return;
    }
    
    if (data === 'admin_detailed_stats') {
      await bot.deleteMessage(chatId, messageId);
      await handleDetailedStats(bot, query.message);
      return;
    }
    
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ callback:', error);
    await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert: true });
  }
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ 
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleDetailedStats(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!config.adminIds.includes(userId)) {
    await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }
  
  try {
    const fs = require('fs');
    const path = require('path');
    const { PLANS } = require('../models/userLimits');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const USERS_DATA_FILE = path.join(__dirname, '../../data/users.json');
    
    let allUsersData = {};
    if (fs.existsSync(USERS_DATA_FILE)) {
      allUsersData = JSON.parse(fs.readFileSync(USERS_DATA_FILE, 'utf8'));
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
    const today = new Date();
    const week = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    const month = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
    
    let newUsersWeek = 0;
    let newUsersMonth = 0;
    let activeUsersWeek = 0;
    let requestsWeek = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const dayStats = {};
    
    for (const [userId, userData] of Object.entries(allUsersData)) {
      const regDate = new Date(userData.registrationDate || 0);
      
      // –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (regDate >= week) newUsersWeek++;
      if (regDate >= month) newUsersMonth++;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ lastActivity)
      if (userData.lastActivity) {
        const lastActivity = new Date(userData.lastActivity);
        if (lastActivity >= week) {
          activeUsersWeek++;
        }
      }
      
      // –ó–∞–ø—Ä–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã)
      if (userData.requestsUsed > 0) {
        requestsWeek += userData.requestsUsed;
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    const totalUsers = Object.keys(allUsersData).length;
    const paidUsers = Object.values(allUsersData).filter(u => 
      u.plan !== 'FREE' && u.subscriptionData?.active
    ).length;
    
    const conversionRate = totalUsers > 0 ? ((paidUsers / totalUsers) * 100).toFixed(2) : 0;
    
    let message = `üìà *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n`;
    
    message += `üìä *–î–ò–ù–ê–ú–ò–ö–ê –†–û–°–¢–ê:*\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: *${newUsersWeek}*\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: *${newUsersMonth}*\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: *${activeUsersWeek}*\n\n`;
    
    message += `üí∞ *–ö–û–ù–í–ï–†–°–ò–Ø:*\n`;
    message += `‚Ä¢ –ü–ª–∞—Ç—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${paidUsers}* –∏–∑ *${totalUsers}*\n`;
    message += `‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: *${conversionRate}%*\n\n`;
    
    message += `üìã *–ê–ö–¢–ò–í–ù–û–°–¢–¨:*\n`;
    message += `‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: *${requestsWeek}*\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: *${activeUsersWeek > 0 ? (requestsWeek/activeUsersWeek).toFixed(1) : 0}*\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    const keyboard = {
      inline_keyboard: [
        [
          { text: '¬´ –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'admin_stats' }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
};

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function setupAdminCommands(bot, userId) {
  try {
    const adminCommands = [
      { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: '/tariff', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ' },
      { command: '/plans', description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã' },
      { command: '/help', description: '–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞' },
      { command: '/about', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏' },
      { command: '/users', description: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)' },
      { command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)' }
    ];

    await bot.setMyCommands(adminCommands, { scope: { type: 'chat', chat_id: userId } });
    console.log(`[INFO] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${userId}.`);
  } catch (error) {
    console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ${userId}:`, error.message);
  }
}

module.exports = {
  handleStart,
  handleHelp,
  handleAdminUsers,
  handleAdminStats,
  handleAdminCallback,
  handleMenuCommand,
  setupPermanentMenu,
  setupAdminCommands,
  handleAbout
}; 