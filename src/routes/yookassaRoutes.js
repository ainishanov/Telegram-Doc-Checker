/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa
 */
const express = require('express');
const router = express.Router();
const { 
  createPayment, 
  getPaymentInfo, 
  capturePayment, 
  cancelPayment, 
  createRefund, 
  handleNotification 
} = require('../utils/yookassa-integration');

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
router.get('/success', async (req, res) => {
  try {
    const { paymentId } = req.query;
    
    if (!paymentId) {
      return res.status(400).send({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    const payment = await getPaymentInfo(paymentId);
    
    if (payment.status === 'succeeded') {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
      
      return res.status(200).send({
        success: true,
        payment
      });
    } else {
      return res.status(200).send({
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω',
        payment
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    
    return res.status(500).send({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
router.post('/create', async (req, res) => {
  try {
    const { amount, description, metadata } = req.body;
    
    if (!amount) {
      return res.status(400).send({
        success: false,
        error: '–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    const payment = await createPayment(amount, description, metadata);
    
    return res.status(200).send({
      success: true,
      payment
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    
    return res.status(500).send({
      success: false,
      error: error.message
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
 */
router.get('/info/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    if (!paymentId) {
      return res.status(400).send({
        success: false,
        error: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    const payment = await getPaymentInfo(paymentId);
    
    return res.status(200).send({
      success: true,
      payment
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error.message);
    
    return res.status(500).send({
      success: false,
      error: error.message
    });
  }
});

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è –¥–≤—É—Ö—Å—Ç–∞–¥–∏–π–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
 */
router.post('/capture/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    const { amount } = req.body;
    
    if (!paymentId) {
      return res.status(400).send({
        success: false,
        error: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await capturePayment(paymentId, amount);
    
    return res.status(200).send({
      success: true,
      payment
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    
    return res.status(500).send({
      success: false,
      error: error.message
    });
  }
});

/**
 * –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
router.post('/cancel/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    if (!paymentId) {
      return res.status(400).send({
        success: false,
        error: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await cancelPayment(paymentId);
    
    return res.status(200).send({
      success: true,
      payment
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    
    return res.status(500).send({
      success: false,
      error: error.message
    });
  }
});

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
router.post('/refund', async (req, res) => {
  try {
    const { paymentId, amount, description } = req.body;
    
    if (!paymentId || !amount) {
      return res.status(400).send({
        success: false,
        error: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
    const refund = await createRefund(paymentId, amount, description);
    
    return res.status(200).send({
      success: true,
      refund
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error.message);
    
    return res.status(500).send({
      success: false,
      error: error.message
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (webhook) –æ—Ç –ÆKassa - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
 */
router.post('/webhook', async (req, res) => {
  try {
    console.log('=== –ü–û–õ–£–ß–ï–ù WEBHOOK –ù–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô ENDPOINT /yookassa/webhook ===');
    console.log('- Headers:', JSON.stringify(req.headers));
    console.log('- Body:', JSON.stringify(req.body));
    
    // –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º 200 —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –Æ–ö–∞—Å—Å–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
    res.status(200).send({ success: true });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const signature = req.headers['webhook-signature'];
    
    if (!signature) {
      console.error('[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const result = await handleNotification(req.body, signature);
    
    if (result.success) {
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
      const { event, data } = result;
      
      console.log(`[INFO] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ${event} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${data.id}`);
      
      switch (event) {
        case 'payment.succeeded':
          // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
          console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', data.id);
          
          // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞
          const userId = data.metadata?.userId;
          const planId = data.metadata?.planId;
          
          if (userId && planId) {
            console.log(`[INFO] –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ ${planId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞
            const { updateUserPlanAfterPayment } = require('../models/userLimits');
            
            try {
              const updateResult = await updateUserPlanAfterPayment(userId, planId, data.id);
              
              if (updateResult.success) {
                console.log(`[SUCCESS] ‚úÖ –¢–∞—Ä–∏—Ñ ${planId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
              } else {
                console.error(`[ERROR] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: ${updateResult.message}`);
              }
            } catch (activationError) {
              console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞:', activationError);
            }
          } else {
            console.warn('[WARN] –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç userId –∏–ª–∏ planId');
            console.warn('- Metadata:', JSON.stringify(data.metadata));
          }
          break;
          
        case 'payment.waiting_for_capture':
          // –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          console.log('‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', data.id);
          break;
          
        case 'payment.canceled':
          // –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
          console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω:', data.id);
          break;
          
        case 'refund.succeeded':
          // –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
          console.log('üí∞ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω:', data.id);
          
          // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞
          const refundUserId = data.metadata?.userId;
          
          if (refundUserId) {
            console.log(`[INFO] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${refundUserId}, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Ç–∞—Ä–∏—Ñ FREE`);
            
            try {
              // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
              const { changePlan } = require('../models/userLimits');
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
              const downgradeResult = await changePlan(refundUserId, 'FREE');
              
              if (downgradeResult.success) {
                console.log(`[SUCCESS] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${refundUserId} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ç–∞—Ä–∏—Ñ FREE –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ ${data.id}`);
              } else {
                console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ FREE —Ç–∞—Ä–∏—Ñ: ${downgradeResult.message}`);
              }
            } catch (refundError) {
              console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', refundError);
            }
          } else {
            console.warn('[WARN] –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId');
            console.warn('- Metadata:', JSON.stringify(data.metadata));
          }
          break;
          
        default:
          console.log(`[INFO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${event} - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
    } else {
      console.error('[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', result.error);
    }
  } catch (error) {
    console.error('[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error.message);
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ 200
  }
});

module.exports = router; 